SELECT USER
FROM DUAL;
-->> HR

--○ 세 개 이상의 테이블 조인(JOIN)

-- 형식 1. (SQL 1992 CODE)

SELECT 테이블명1.컬럼명, 테이블명2.컬럼명, 테이블명3.컬럼명
FROM 테이블명1, 테이블명2, 테이블명3
WHERE 테이블명1.컬럼명1 = 테이블명2.컬럼명1 
  AND 테이블명2.컬럼명2 = 테이블명3.컬럼명2;


-- 형식 2. (SQL 1999 CODE)

SELECT 테이블명1.컬럼명, 테이블명2.컬럼명
FROM 테이블명1 JOIN 테이블명2
ON 테이블명1.컬럼명1 = 테이블명2.컬럼명1
                 JOIN 테이블명3
                 ON 테이블명2.컬럼명 = 테이블명3.컬럼명2;
                 
--○ HR 계정 소유의 테이블 또는 뷰 목록 조회
SELECT *
FROM TAB;
/*
COUNTRIES	        TABLE	
DEPARTMENTS	        TABLE	
EMPLOYEES	        TABLE	
EMP_DETAILS_VIEW	VIEW	
JOBS	            TABLE	
JOB_HISTORY	        TABLE	
LOCATIONS	        TABLE	
REGIONS	            TABLE	
*/

--○ HR.JOBS, HR.EMPLOYEES, HR.DEPARTMENTS 테이블을 대상으로 직원들의 데이터를
--   FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME 항목으로 조회한다.
SELECT *
FROM JOBS;
-- JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY

SELECT *
FROM employees;
/*
EMPLOYEE_ID 
FIRST_NAME 
LAST_NAME                 
EMAIL                     
PHONE_NUMBER         
HIRE_DATE  
JOB_ID   부모 : JOBS , JOBS와 연결고리
SALARY 
COMMISSION_PCT   
MANAGER_ID 
DEPARTMENT_ID 
*/

SELECT *
FROM DEPARTMENTS;
/*
DEPARTMENT_ID
DEPARTMENT_NAME
MANAGER_ID 
LOCATION_ID
*/

--○ HR.JOBS, HR.EMPLOYEES, HR.DEPARTMENTS 테이블을 대상으로 직원들의 데이터를
--   FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME 항목으로 조회한다.

--VER.92     
SELECT E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
FROM JOBS J,  EMPLOYEES E , DEPARTMENTS D
WHERE E.JOB_ID = J.JOB_ID
AND   E.DEPARTMENT_ID = D.DEPARTMENT_ID(+);

--VER.99     
SELECT E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
FROM JOBS J JOIN EMPLOYEES E
ON E.JOB_ID = J.JOB_ID
           LEFT JOIN DEPARTMENTS D
            ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
-- EMPLOYEES 가 이제 직원들 정보니깐
-- 그걸 먼저 다 불러와서 맞추는게 맞을듯 
-- Kimberely 씨의 DEPARTMENT_ID가 없기 때문에 EQUI JOIN이나 OUTER JOIN 안해주면 
-- Kimberely 씨는 누락된다.

--○ EMPLOYEES, DEPARTMENTS, JOBS, LOCATIONS, COUNTRIES, REGIONS 테이블을 대상으로
--   직원들의 데이터를 다음과 같이 조회할 수 있도록 쿼리문을 구성한다.
--   FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME, CITY, COUNTRY_NAME, REGION_NAME
--     E            E          J         D               L          C          R

SELECT *
FROM EMPLOYEES;

SELECT *
FROM DEPARTMENTS;

SELECT *
FROM JOBS;

SELECT *
FROM LOCATIONS;

SELECT *
FROM COUNTRIES;

SELECT *
FROM REGIONS;

--   FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME, CITY, COUNTRY_NAME, REGION_NAME
--     E            E          J         D               L          C          R

--VER 92
SELECT E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
     , L.CITY, C.COUNTRY_NAME, R.REGION_NAME
FROM EMPLOYEES E, DEPARTMENTS D, JOBS J, LOCATIONS L, COUNTRIES C, REGIONS R
WHERE E.JOB_ID = J.JOB_ID
AND   E.DEPARTMENT_ID = D.DEPARTMENT_ID(+)
AND   D.LOCATION_ID = L.LOCATION_ID(+)
AND   L.COUNTRY_ID = C.COUNTRY_ID(+)
AND   C.REGION_ID = R.REGION_ID(+);


--VER 99
SELECT E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
     , L.CITY, C.COUNTRY_NAME, R.REGION_NAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON  E.DEPARTMENT_ID = D.DEPARTMENT_ID 
         JOIN JOBS J
         ON E.JOB_ID = J.JOB_ID
            LEFT JOIN LOCATIONS L
            ON D.LOCATION_ID = L.LOCATION_ID
                LEFT JOIN COUNTRIES C
                ON L.COUNTRY_ID = C.COUNTRY_ID
                    LEFT JOIN REGIONS R
                    ON C.REGION_ID = R.REGION_ID ;
                    
-- JOBS 테이블과 EMPLOYEES 간에 는 OUTER JOIN 없어도됨
-- Kimberely 씨가 없는건 DEPARTMENT_ID 
-- DEPARTMENT_ID 가 없으면 JOBS 테이블을 제외하고 테이블마다 인과관계가 있어서 
-- OUTER 모두 해주는게 중요


